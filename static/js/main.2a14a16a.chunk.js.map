{"version":3,"sources":["Components/Section/Section.jsx","Components/Form/Form.jsx","Components/FilterInput/FilterInput.jsx","Components/ContactItem/ContactItem.jsx","Components/ContactsList/ContactsList.jsx","App.jsx","index.js"],"names":["Section","title","children","id","Form","state","name","number","inputHandler","event","setState","target","value","submitHandler","preventDefault","props","onSubmit","cleanInput","this","className","styles","form","onChange","type","pattern","required","Component","FilterInput","ContactItem","contacts","deleteOnClickButton","map","onClick","ContactsList","App","primaryContacts","filter","addContact","contact","uuidv4","some","toLowerCase","alert","filteringInput","console","log","changeContactsByFilter","includes","prevState","localStorage","getItem","jsonParsedContacts","JSON","parse","prevStateContacts","newStateContacts","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a14a16a.chunk.js","sourcesContent":["// import PropTypes from \"prop-types\";\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <h2 id=\"blink3\">{title}</h2>\n      {children}\n    </div>\n  );\n}\n\n// Section.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   children: PropTypes.element.isRequired,\n// };\n","import React, { Component } from \"react\";\nimport styles from \"../../App.css\";\n\nclass Form extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  // Input handler function\n  inputHandler = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n    // console.log(event.target.name, event.target.value);\n    // console.log(this.state);\n  };\n\n  //Submit handler function\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n    // console.log(this.state);\n\n    this.cleanInput();\n  };\n\n  // Cleaning input function\n  cleanInput = () => {\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    // console.log(name, number);\n\n    return (\n      <form className={styles.form} onSubmit={this.submitHandler}>\n        <label>\n          Name\n          <input\n            name=\"name\"\n            value={name}\n            onChange={this.inputHandler}\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            name=\"number\"\n            value={number}\n            onChange={this.inputHandler}\n            type=\"tel\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","const FilterInput = ({ value, onChange }) => {\n  return (\n    <label>\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n\nexport default FilterInput;\n","const ContactItem = ({ contacts, deleteOnClickButton }) =>\n  contacts.map(({ id, name, number }) => {\n    return (\n      <li key={id}>\n        {name}: {number}\n        <button type=\"button\" onClick={() => deleteOnClickButton(id)}>\n          Delete\n        </button>\n      </li>\n    );\n  });\n\nexport default ContactItem;\n","import ContactItem from \"../ContactItem/ContactItem\";\n\nconst ContactsList = ({ contacts, deleteOnClickButton }) => (\n  <ol type=\"1\">\n    <ContactItem\n      contacts={contacts}\n      deleteOnClickButton={deleteOnClickButton}\n    />\n  </ol>\n);\n\nexport default ContactsList;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport Section from \"./Components/Section/Section\";\nimport Form from \"./Components/Form/Form\";\nimport FilterInput from \"./Components/FilterInput/FilterInput\";\nimport ContactsList from \"./Components/ContactsList/ContactsList\";\n\nimport primaryContacts from \"./Data/primaryContacts.json\";\n\nexport default class App extends Component {\n  state = {\n    contacts: primaryContacts,\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n\n  // Life-cycle method at mounting this APP\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const jsonParsedContacts = JSON.parse(contacts);\n\n    if (jsonParsedContacts) {\n      this.setState({ contacts: jsonParsedContacts });\n    }\n  }\n\n  // Life-cycle method upon changes in this APP\n  componentDidUpdate(prevState) {\n    const prevStateContacts = prevState.contacts;\n    const newStateContacts = this.state.contacts;\n\n    if (prevStateContacts !== newStateContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(newStateContacts));\n    }\n  }\n\n  // Add contact function\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    // console.log(contact);\n\n    contacts.some(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    )\n      ? alert(`${name} is already in contacts`)\n      : contacts.some(({ number }) => number === contact.number)\n      ? alert(`${number} is already in contacts`)\n      : this.setState(({ contacts }) => ({ contacts: [...contacts, contact] }));\n  };\n\n  // Filtering input function\n  filteringInput = (event) => {\n    this.setState({ filter: event.target.value });\n    console.log({ filter: event.target.value });\n  };\n\n  // Change contact list by filter function\n  changeContactsByFilter = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  // Function of Delete contact by clicking on button\n  deleteOnClickButton = (id) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n    const contacts = this.changeContactsByFilter();\n\n    return (\n      <section>\n        <Section title={\"Phonebook\"}>\n          <Form onSubmit={this.addContact} />\n        </Section>\n\n        <Section title={\"Filter contacts by name\"}>\n          <FilterInput value={filter} onChange={this.filteringInput} />\n        </Section>\n\n        <Section title={\"Contacts\"}>\n          <ContactsList\n            contacts={contacts}\n            deleteOnClickButton={this.deleteOnClickButton}\n          />\n        </Section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}